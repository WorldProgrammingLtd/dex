def imageTag = "unknown"

// This is based on the CI workflow from .github/workflows/ci.yaml

pipeline {
    agent {
        kubernetes {
            cloud 'internal'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: git
    image: alpine/git:v2.26.2
    command: ['cat']
    tty: true
  - name: golang
    image: docker.worldprogramming.com/golang:1.16rc1-buster
    command: ['cat']
    tty: true
  - name: kaniko
    image: kaniko-project/executor:debug
    command: ['/busybox/cat']
    tty: true
    volumeMounts:
      - name: kaniko-secret
        mountPath: /kaniko/.docker
  - name: postgres
    image: postgres:10.8
    ports:
      - name: postgres
        containerPort: 5432
  - name: mysql
    image: mysql:5.7
    ports:
      - name: mysql
        containerPort: 3306
    env:
      - name: MYSQL_ROOT_PASSWORD
        value: root
      - name: MYSQL_DATABASE
        value: dex
  - name: etcd
    image: gcr.io/etcd-development/etcd:v3.2.9
    ports:
      - name: etcd
        containerPort: 2379
    env:
      - name: ETCD_LISTEN_CLIENT_URLS
        value: http://0.0.0.0:2379
      - name: ETCD_ADVERTISE_CLIENT_URLS
        value: http://0.0.0.0:2379
  - name: keystone
    image: openio/openstack-keystone:pike
    ports:
      - name: keystone
        containerPort: 5000
      - name: keystone-admin
        containerPort: 35357
  volumes:
    - name: kaniko-secret
      secret:
        secretName: regcred
        items:
          - key: .dockerconfigjson
            path: config.json
"""
        }
    }
    options {
        timeout(time: 15, unit: 'MINUTES', activity: true)
	    disableConcurrentBuilds()
	    buildDiscarder(logRotator(numToKeepStr: '20'))
	    timestamps()
	    skipDefaultCheckout()
	    ansiColor('xterm')
    }
    triggers {
	    pollSCM('H/5 * * * *')
    }

    stages {
        stage ('Checkout') {
            steps {
		        container('git') {
		            checkout scm
		            script {
			            imageTag = sh(returnStdout: true,
				                      script: "git describe --tags --match 'v*.*.*'").trim()
			            currentBuild.displayName = imageTag
			            echo "Building dex:${imageTag}"
		            }
		        }
            }
        }

        stage ('Test') {
            steps {
                container('golang') {
                    sh 'make testall'
                }
            }
        }

        stage ('Lint') {
            steps {
                container('golang') {
                    sh 'make lint'
                }
            }
        }

        stage ('Verify proto') {
            steps {
                container('golang') {
                    sh 'make verify-proto'
                }
            }
        }

        stage ('Build image') {
            steps {
		        container('kaniko') {
		            sh "/kaniko/executor -f Dockerfile -c `pwd` --destination=docker.worldprogramming.com/dex:${imageTag}"
		        }
	        }
        }
    }
}
